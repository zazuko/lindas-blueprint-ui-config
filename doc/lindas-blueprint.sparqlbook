[
  {
    "kind": 1,
    "language": "markdown",
    "value": "## Graphs of interest",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "SELECT distinct ?g WHERE {\n  GRAPH ?g {\n  }\n}\nORDER BY ?g",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "The named-graphs we are intersted in:\n\n- https://lindas.admin.ch/fch/staatskalender\n- https://lindas.admin.ch/sbb/nova",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "SELECT ?g ?cls (COUNT(?s) AS ?count) WHERE {\n  GRAPH ?g {\n    ?s a ?cls\n  }\n} GROUP BY ?g  ?cls\nORDER BY ?g ?cls\n\nVALUES ?g {\n    # <https://lindas.admin.ch/fch/staatskalender>\n    <https://lindas.admin.ch/sbb/nova>\n}\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "## Classes of interest\n\nThe original `construct-candidate-classes.rq` query runs into query timeout (after 2 minutes).\n\nTherefore, lets only consider the graphs of interest:\n```\nVALUES ?g {\n    <https://lindas.admin.ch/fch/staatskalender>\n}\n```",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "PREFIX : <http://schema.example.org/blueprint-ui-config-initializer/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\n\nconstruct {\n\t?cls a :Class ;\n    \t:label ?localName ;\n    \t:icon \"far fa-circle\" ;\n        :colorIndex 1 ;\n        :searchPrio 1 .\n}\nwhere {\n    {\n        select distinct ?cls ?localName where {\n          VALUES ?g {\n            <https://lindas.admin.ch/fch/staatskalender>\n          }\n          GRAPH ?g {\n            ?subject a ?cls .\n            bind(replace(str(?cls), \"^.*[/#]\", \"\") AS ?localName)\n            MINUS {\n                # --- blocklist ---\n                VALUES ?cls {\n                    rdf:Property\n                    owl:TransitiveProperty\n                    owl:SymmetricProperty\n                    rdf:List\n                    rdfs:Class\n                    rdfs:Datatype\n                    rdfs:ContainerMembershipProperty\n                    # -----------------------------------\n                    <http://www.w3.org/ns/shacl#NodeShape>\n                    <http://www.w3.org/ns/shacl#PropertyShape>\n                    <http://www.w3.org/ns/shacl#PropertyGroup>\n                    <http://www.w3.org/ns/shacl#Group>\n                    # -----------------------------------\n                    <http://www.w3.org/ns/prov#Activity>\n                    <https://barnard-prov.described.at/Codebase>\n                    <https://barnard-prov.described.at/PipelineRunCollection>\n                    <https://barnard-prov.described.at/Commit>\n                    <https://barnard-prov.described.at/PipelineRun>            \n                    <https://barnard-prov.described.at/Job>\n                    # -----------------------------------\n                    <https://flux.described.at/Detail>\n                    <https://flux.described.at/Link>\n                    <https://flux.described.at/CompositionToNodeLink>\n                    <https://flux.described.at/Aggregate>\n                    <https://flux.described.at/Composition>            \n                    <https://flux.described.at/Hierarchy>\n                    <https://flux.described.at/Container>\n                    <https://flux.described.at/ConnectionPoint>\n                    # -----------------------------------\n                    <https://ld.flux.zazuko.com/shapes/metadata/ClassShape>\n                    <https://ld.flux.zazuko.com/shapes/metadata/ClassMetadataShape>            \n                    <https://ld.flux.zazuko.com/shapes/metadata/ClassDetailShape>\n                } \n            }\n          }\n        } order by ?localName ?cls\n    }      \n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "## PostalAdress\n\nCheck if `PostalAdress` nodes are re-used (multiple organizations linking to the same address) or not.\n\nResult: They are not re-used and are only linked from one organisation. So we don't show a node for the Address in Blueprint. We could show the adress in the details of the GovernementOrganization, if required.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "SELECT (COUNT(?org) AS ?orgCount) WHERE {\n    VALUES ?g {\n        <https://lindas.admin.ch/fch/staatskalender>\n    }\n    GRAPH ?g {\n        ?org a <http://schema.org/GovernmentOrganization> .\n        ?org <http://schema.org/address> ?address .\n    }\n} GROUP BY ?address\nORDER BY DESC(?orgCount)\nLIMIT 1",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Organization Hierarchy - Tree\n\nTo figure out the tree config, its easier to work with a small data-sample instead of the complete dataset:",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "describe * where {\n    select * where {\n        ?org a <http://schema.org/GovernmentOrganization> .\n        ?subOrg1 <http://schema.org/parentOrganization> ?org .\n        ?subOrg2 <http://schema.org/parentOrganization> ?subOrg1 .\n        ?role0 <http://schema.org/memberOf> ?org .\n        ?role1 <http://schema.org/memberOf> ?subOrg1 .\n        ?role2 <http://schema.org/memberOf> ?subOrg2 .\n        ?person0 <http://schema.org/memberOf> ?role0 .\n        ?person1 <http://schema.org/memberOf> ?role1 .\n        ?person2 <http://schema.org/memberOf> ?role2 .\n    } limit 1\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Nova\n\nSome zones don't have a label ...",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect ?p (count(distinct ?zone) AS ?zoneCount) where {    \n    ?zone a <https://lod.opentransportdata.swiss/vocab/Zone> .\n\n    ?zone ?p ?o .\n    VALUES ?p {\n        rdfs:label\n        <http://schema.org/identifier>\n    }\n}\ngroup by ?p",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Construct the missing labels ...",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# select (count(distinct ?zone) AS ?zoneCount) where {\nCONSTRUCT {\n    ?zone rdfs:label ?identifier .\n} WHERE {\n    ?zone a <https://lod.opentransportdata.swiss/vocab/Zone> .\n    ?zone <http://schema.org/identifier> ?identifier .\n\n    MINUS {\n        ?zone rdfs:label ?label .\n    }\n}",
    "metadata": {}
  }
]